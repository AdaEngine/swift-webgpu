import CWebGPU

{% for object in model.types_by_category('object') %}
public class {{ object.swift_name }} {
    let object: {{ object.c_name }}!

    init(object: {{ object.c_name }}!) {
        self.object = object
    }

    deinit {
        {% for method in object.methods %}{% if method.is_callback_setter %}
        {{ method.swift_name }}(nil)
        {% endif %}{% endfor %}
        {{ object.release_method_name }}(self.object)
    }
    {% for method in object.methods %}

    {% if method.is_callback_setter %}
    var _{{ method.swift_name }}: UserData<{{ method.args[0].type.swift_name }}>? = nil
    public func {{ method.swift_name }}(_ callback: {{ method.args[0].type.swift_name }}?) {
        if let callback = callback {
            let userData = UserData(callback)
            self._{{ method.swift_name }} = userData
            {{ method.c_name }}(self.object, {{ method.args[0].type.function_name }}, userData.toOpaque())
        } else {
            self._{{ method.swift_name }} = nil
            {{ method.c_name }}(self.object, nil, nil)
        }
    }
    {% else %}
    {% if method.is_getter %}
    public var {{ method.swift_name }}: {{ method.return_type.swift_name }} {
    {% else %}
    public func {{ method.swift_name }}(
    {%- if method.hide_first_arg_label %}_ {% endif -%}
    {%- for arg in method.swift_args -%}
    {{ arg.swift_name }}: {{ arg.swift_type }}
    {%- if arg.default_swift_value %} = {{ arg.default_swift_value }}{% endif %}
    {% if not loop.last %}, {% endif %}
    {%- endfor -%}
    ){% if method.return_type %} -> {{ method.return_type.swift_name }}{% endif %} {
    {% endif %}
        {% for arg in method.args %}
        {% if arg.conversion.requires_closure %}
        {{ arg.conversion.get_closure_head(arg.target_swift_name) }}
        {% endif %}
        {% endfor %}
        {%+ if method.return_type %}let result = {% endif %}{{ method.c_name }}(
            self.object{% if method.args %}, {% endif %}

            {% for arg in method.args %}
            {{ arg.conversion.get_c_value(arg.target_swift_name) }}{% if not loop.last %}, {% endif %}

            {% endfor %}
        )
        {% if method.return_type %}
        return {{ method.return_conversion.get_swift_value('result') }}
        {% endif %}
        {% for arg in method.args %}
        {% if arg.conversion.requires_closure %}
        {{ arg.conversion.get_closure_tail(arg.target_swift_name) }}
        {% endif %}
        {% endfor %}
    }
    {% endif %}
    {% endfor %}
}

{% endfor %}