import CWebGPU

{% for struct in model.types_by_category('structure') %}
public struct {{ struct.swift_name }}: CStructConvertible {
    typealias CStruct = {{ struct.c_name }}

    {% for member in struct.members %}
    public var {{ member.swift_name }}: {{ member.swift_type }}
    {% endfor %}

    func withCStruct<R>(_ body: (UnsafePointer<{{ struct.c_name }}>) throws -> R) rethrows -> R {
        {% for member in struct.members %}
        {% if member.conversion.requires_closure %}
        return try {{ member.conversion.get_closure_head(member.swift_name, prefix='self.') }}
        {% endif %}
        {% endfor %}
        var cStruct = {{ struct.c_name }}(
            {% if struct.extensible %}
            nextInChain: nil{% if struct.members %}, {% endif %}

            {% endif %}
            {% if struct.chained %}
            chain: WGPUChainedStruct(){% if struct.members %}, {% endif %}

            {% endif %}
            {% for member in struct.members %}
            {{ member.c_name }}: {{ member.conversion.get_c_value(member.swift_name, prefix='self.') }}{% if not loop.last %}, {% endif %}

            {% endfor %}
        )
        return try body(&cStruct)
        {% for member in struct.members %}
        {% if member.conversion.requires_closure %}
        {{ member.conversion.get_closure_tail(member.swift_name, prefix='self.') }}
        {% endif %}
        {% endfor %}
    }
}

{% endfor %}